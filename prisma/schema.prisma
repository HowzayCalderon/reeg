generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String    @default("")
  password      String    @default("")
  image         String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique 
  role          Role      @default(Student)
  accounts      Account[]
  sessions      Session[]
  Teacher       Teacher?
  Student       Student?
}

model Teacher {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  classlist Class[]
}

model Student {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id])
  userId     String  @unique
  gradelevel Int
  Class      Class[]
  classId    Int?
  answers    Answer[]
  performance TopicPerformance[]
}

model Class {
  id        Int       @id @default(autoincrement())
  classname String
  students  Student[]
  Teacher   Teacher?  @relation(fields: [teacherId], references: [id])
  teacherId Int?
  topic     Subject   @relation(fields: [topicId], references: [id])
  topicId   Int 
}

model Subject {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  questions Question[] 
  classes   Class[]
  topics    Topic[]
} 

model Topic {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int
  questions Question[]
  performances TopicPerformance[]
}

model TopicPerformance {
  id        Int    @id @default(autoincrement()) 
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  topic     Topic   @relation(fields: [topicId], references: [id])
  topicId   Int
  attemps   Int
}

model Question {
  id        Int     @id @default(autoincrement())
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int
  difficulty String 
  topic     Topic   @relation(fields: [topicId], references: [id])
  topicId   Int     
  que       String  @unique
  optionOne String
  optionTwo String
  optionThree String
  optionFour String
  corrAnswer String @default("")
  answer    Answer[]
}

model Answer {
  id        Int     @id @default(autoincrement())
  question Question @relation(fields: [questionId], references: [id])
  questionId Int    @unique
  userAnswer String
  student   Student @relation(fields:[studentId], references: [id])
  studentId Int 
  isCorrect Boolean 
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  Teacher
  Student
  Admin
}
